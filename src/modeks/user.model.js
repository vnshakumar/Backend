import mongoose, { MongooseError } from "mongoose";
import bcrypt from "bcryptjs";
import  jwt from "jsonwebtoken";
import { emit } from "nodemon";
const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
        index: true
    },
    email: {
        typ: String,
        require: true,
        unique: true,
        lowercase: true,
        trim: true
    },
    fullname: {
        type: String,
        required: true,
        trim: true,
        index: true,
    },
    avatar: {
        type: String,//Cloudinary url
        required: true,

    },
    coverImage: {
        type: String,//cloudinary url
    },
    watchHistory: [
        {
            type: mongoose.Schema.Types.ObjectId,
            required: true,
            ref: "Video"
        }
    ],
    password: {
        type: String,
        required: [true, "Password is required"]
    },
    refreshToken: {
        type: String // generated by server side
    }
}
    , { timestamps: true }
)

UserSchema.pre('save', async function (next) {
    if (!this.isModified("password")) return next(); 
    this.password=bcrypt.hash(this.password,10);
    next();
 });
 UserSchema.methods.checkPassword = async function(inputPassword, userPassword){
     return await bcrypt.compare(inputPassword,userPassword);
 }

 userSchema.method.generateAccessToken=function(){
    return jwt.sign({
        _id:this._id,
        email:this.email,
        username:this.username,
        fullname:this.fullname
    },
    process.env.ACCESS_TOKEN_SECRET,{
        expiresIn:process.env.ACCESS_TOKEN_EXPIRY
    })
 }


 userSchema.method.generateRefreshToken=function(){
    return jwt.sign({
        _id:this._id,
         
    },
    process.env.REFRESH_TOKEN_SECRET,{
        expiresIn:process.env.REFRESH_TOKEN_EXPIRY
    })
 }

export const User=mongoose.model("User",userSchema);